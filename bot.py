# bot.py
import asyncio
import logging
from datetime import datetime, timedelta, timezone
import aiohttp
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    LabeledPrice, PreCheckoutQuery, Message
)
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.bot import DefaultBotProperties

# === –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò–ó .env ===
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
CRYPTOPAY_TOKEN = os.getenv("CRYPTOPAY_TOKEN")

if not API_TOKEN:
    raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API_TOKEN –≤ —Ñ–∞–π–ª–µ .env")

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher(storage=MemoryStorage())

# === –§–£–ù–ö–¶–ò–ò CRYPTOBOT ===
BASE_URL = "https://pay.crypt.bot/api/"

async def get_exchange_rate(asset="TON"):
    url = BASE_URL + "getExchangeRates"
    headers = {"Crypto-Pay-API-Token": CRYPTOPAY_TOKEN}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            result = await resp.json()
            for rate in result["result"]:
                if rate["source"] == "USD" and rate["target"] == asset:
                    return float(rate["rate"])
            for rate in result["result"]:
                if rate["source"] == asset and rate["target"] == "USD":
                    return 1 / float(rate["rate"])
    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {asset}")

async def create_crypto_invoice(amount_usd=1, asset="TON"):
    rate = await get_exchange_rate(asset)
    amount = round(amount_usd * rate, 4)
    url = BASE_URL + "createInvoice"
    headers = {"Crypto-Pay-API-Token": CRYPTOPAY_TOKEN}
    data = {
        "amount": amount,
        "asset": asset,
        "description": f"–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({amount_usd}$ –≤ {asset})"
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as resp:
            result = await resp.json()
            if "result" in result:
                return result["result"]
            else:
                raise Exception(result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))

async def check_invoice(invoice_id):
    url = BASE_URL + f"getInvoices?invoice_ids={invoice_id}"
    headers = {"Crypto-Pay-API-Token": CRYPTOPAY_TOKEN}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as resp:
            result = await resp.json()
            return result["result"]["items"][0]

async def wait_for_payment(user_id, invoice_id):
    for _ in range(30):  # –∂–¥—ë–º –¥–æ 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(10)
        invoice = await check_invoice(invoice_id)
        if invoice["status"] == "paid":
            try:
                expire_time = int((datetime.now(timezone.utc) + timedelta(minutes=10)).timestamp())
                invite_link = await bot.create_chat_invite_link(
                    chat_id=CHANNEL_ID,
                    expire_date=expire_time,
                    member_limit=1,
                    name=f"–û–ø–ª–∞—Ç–∞ –æ—Ç {user_id}"
                )
                await bot.send_message(
                    user_id,
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{invite_link.invite_link}\n\n"
                    f"‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—Ö–æ–¥–∞."
                )
                await bot.send_message(
                    ADMIN_ID,
                    f"üí≥ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ CRYPTOBOT!\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {invite_link.invite_link}"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
            return

# === –•–ï–ù–î–õ–ï–†–´ ===
@dp.message(F.text == "/start")
async def start(message: types.Message):
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Altushki*\n\n"
        "- –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É.\n"
        "- –ë–æ–ª–µ–µ 3000 –≤–∏–¥–µ–æ –∏ 4000 —Ñ–æ—Ç–æ.\n"
        "- –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
        "‚õÉ *–û–ø–ª–∞—Ç–∞ –Ω–∞–≤—Å–µ–≥–¥–∞:*\n"
        "- 99—Ä (–∫–∞—Ä—Ç–∞ / –∫—Ä–∏–ø—Ç–∞)\n"
        "- –¶–µ–Ω–∞ –≤ –∑–≤—ë–∑–¥–∞—Ö 100 ‚ú∞\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ü–õ–ê–¢–ê –ü–†–ò–í–ê–¢–ù–û–ì–û –ö–ê–ù–ê–õ–ê", callback_data="pay_options")],
        [InlineKeyboardButton(text="‚≠ê –û–¢–ó–´–í–´", url="https://t.me/+FkWlpM6bH5RmNzVi")]
    ])
    await message.answer(text, reply_markup=kb)

@dp.callback_query(F.data == "pay_options")
async def payment_options(callback: types.CallbackQuery):
    await callback.answer()
    text = "*–í–´–ë–ï–†–ò–¢–ï –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´*"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –£–ö–† –ö–ê–†–¢–ê", callback_data="ukr_card")],
        [InlineKeyboardButton(text="üí≥ –†–£ –ö–ê–†–¢–ê", callback_data="ru_card")],
        [InlineKeyboardButton(text="üí∞ CRYPTOBOT", callback_data="crypto_choose")],
        [InlineKeyboardButton(text="‚ú® –ó–í–Å–ó–î–ê–ú–ò", callback_data="pay_stars")]
    ])
    await callback.message.edit_text(text, reply_markup=kb)

@dp.callback_query(F.data == "crypto_choose")
async def crypto_choose(callback: types.CallbackQuery):
    await callback.answer()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé TON", callback_data="crypto_TON")],
        [InlineKeyboardButton(text="üíµ USDT", callback_data="crypto_USDT")],
        [InlineKeyboardButton(text="‚Çø BTC", callback_data="crypto_BTC")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pay_options")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

@dp.callback_query(F.data.startswith("crypto_"))
async def crypto_payment(callback: types.CallbackQuery):
    await callback.answer()
    asset = callback.data.split("_")[1]
    try:
        invoice = await create_crypto_invoice(amount_usd=1, asset=asset)
        pay_url = invoice["pay_url"]
        invoice_id = invoice["invoice_id"]
        await callback.message.answer(
            f"üí∞ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (1$ –≤ {asset})\n\n"
            f"üëâ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –≤—ã—à–ª–µ—Ç –¥–æ—Å—Ç—É–ø ‚úÖ"
        )
        asyncio.create_task(wait_for_payment(callback.from_user.id, invoice_id))
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")

# === –£–ö–† –ö–ê–†–¢–ê ===
@dp.callback_query(F.data == "ukr_card")
async def ukr_card(callback: types.CallbackQuery):
    text = (
        "*–û–ü–õ–ê–¢–ê –ü–†–ò–í–ê–¢–ê –ö–ê–†–¢–û–ô (–£–ö–†):*\n\n"
        "5168752022336435 | –ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫\n"
        "4441114432331898 | –ú–æ–Ω–æ–±–∞–Ω–∫\n\n"
        "‚õÉ *50 –≥—Ä–∏–≤–µ–Ω* —Å—Ç–æ–∏—Ç –ø—Ä–∏–≤–∞—Ç–∫–∞.\n"
        "–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —é–∑–µ—Ä –≤ Telegram.\n\n"
        "–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ @altushkisupport —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π.\n"
        "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–∏–Ω–µ—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pay_options")]
    ])
    await callback.message.edit_text(text, reply_markup=kb)

# === –†–£ –ö–ê–†–¢–ê ===
@dp.callback_query(F.data == "ru_card")
async def ru_card(callback: types.CallbackQuery):
    text = (
        "*–û–ü–õ–ê–¢–ê –ü–†–ò–í–ê–¢–ê FUNPAY (–†–£):*\n\n"
        "https://funpay.com/lots/offer?id=51992416 | Funpay\n\n"
        "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–∏–Ω–µ—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="pay_options")]
    ])
    await callback.message.edit_text(text, reply_markup=kb)

# === –ó–í–Å–ó–î–´ ===
@dp.callback_query(F.data == "pay_stars")
async def pay_stars(callback: types.CallbackQuery):
    await callback.answer()
    price = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=100)]
    await callback.message.answer_invoice(
        title="Altushki privat",
        description="–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
        provider_token=PROVIDER_TOKEN,
        currency="XTR",
        prices=price,
        payload="stars_payment"
    )

@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def payment_success(message: Message):
    try:
        await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É...")
        expire_time = int((datetime.now(timezone.utc) + timedelta(minutes=10)).timestamp())
        invite_link = await bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            expire_date=expire_time,
            member_limit=1,
            name=f"–û–ø–ª–∞—Ç–∞ –æ—Ç {message.from_user.id}"
        )
        await message.answer(
            f"üîó *–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:*\n"
            f"{invite_link.invite_link}\n\n"
            f"‚è≥ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—Ö–æ–¥–∞!"
        )
        await bot.send_message(
            ADMIN_ID,
            f"üí≥ *–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏!*\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–±–µ–∑ username'} "
            f"(ID: {message.from_user.id})\n"
            f"üîó –°—Å—ã–ª–∫–∞: {invite_link.invite_link}"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ @altushkisupport")

# === MAIN ===
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())







